tests and test cases. 

Use Mocha to test?

use testunit ?

tests shall include defined examples of good and bad input, as well as no input

no input shall attempt to use file for input, and there should be examples of good input, bad input, and no input

if we can't get good input, we should still handle all behavior gracefully.

If there is a potential for an element expexted from an API to be non-existent, then that value assignment should be handled with a try /catch, and error messages detected and output appropriately (usually that means hidden from user, and output to a logfile)


allowable commands (the input smashes case, so case doesn't matter. Also, any whitespace should be trimmed):
spotify-this-song
concert-this
movie-this
do-what-it-says (same as not entering anything, it should read in the file random.txt and attempt to use the information there to execute the application; any other arguments provided here are ignored).

so cases are (and these inputs should produce the same output whether they are input at command line or from input file, with the exception that do-what-it-says is not allowable for the input file case):

A. no command (or any arguments given)
B. no command given but another input provided other than allowable commands

C. command given with no other arguments given (i.e., default behavior for that command)
D. command given with other good input
E. command given with other bad input

so a total of five types of cases, to be tested against both CLI input and file input (same lists of arguments tried against all ).

test-suite-1 (contains the following groups)

test-group-1-a (spotify-this-song, CLI input): types included: good input, bad input, no input
test-group-1-b (spotify-this-song, file input): types included: good input, bad input, no input 
test-group-2-a (concert-this, CLI input): types included: good input, bad input, no input 
test-group-2-b (concert-this, file input): types included: good input, bad input, no input 
test-group-3-a (movie-this, CLI input): types included: good input, bad input, no input 
test-group-3-b (movie-this, file input): types included: good input, bad input, no input 
test-group-4-a (do-what-it-says, CLI input) (of course, this is already covered under groups 1-b, 2-b, and 3-b, so unless there are any other tests not covered there, this is left empty) (defn: any additional CLI arguments beyond the command do-what-it-says are ignored, so that is something which should be tested here: : types included: good input, bad input, no input )
test-group-4-b ((no input), CLI input) (should perform same as behavior tested in 4-a) : types included: good input, bad input, no input 
test-group-4-c ((no input), file input) : types included: good input (or file), bad input (or file), no input (blank file, no file) (good input here means one of the three allowable commands followed by a comma and then followed by a good input term. bad input includes bad input terms with good commands (with or without comma), and bad input params with bad or no commands, or no input with bad or no commands, or no/bad params with no commands)

4-d: any argument sets input which don't begin with one of the four commands will be rejected with a warning message.